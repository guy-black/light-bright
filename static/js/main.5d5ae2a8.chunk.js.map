{"version":3,"sources":["peg.js","App.js","serviceWorker.js","index.js"],"names":["Peg","props","useState","hue","setHue","light","setLight","useEffect","pushState","colors","height","size","width","onClick","console","log","fill","cx","cy","r","rad","App","pegSize","setPegSize","pegRad","setPegRad","numRows","setNumRows","numCols","setNumCols","showing","setShowing","grid","pegColors","buildGrid","i","row","k","push","Math","floor","window","innerHeight","innerWidth","className","onChange","id","type","value","e","target","min","max","onMouseUp","style","gridTemplateColumns","map","col","key","h","l","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.5d5ae2a8.chunk.js","sourcesContent":["import React,{useState, useEffect} from 'react';\r\n\r\nfunction Peg(props){\r\n  const [hue, setHue] = useState(0);\r\n  const [light, setLight] = useState(0);\r\n  useEffect(()=>props.pushState(hue, light),[hue, light, props])\r\n\r\n  let colors = `hsl(${hue}, 100%, ${light}%)`;\r\n  function handleClick (){\r\n    console.log(\"ayyyee lit fam\");\r\n    if( hue < 360 && light === 50 ){\r\n      setHue(hue+15)\r\n    }else{\r\n      if(hue >= 360){setHue(0);}\r\n      if(light === 50) {setLight(100);}\r\n      else if(light===100){setLight(0);}\r\n      else if(light === 0){\r\n        setLight(50);\r\n      }\r\n\r\n    }\r\n  }\r\n\r\n  return(\r\n  <svg height={props.size} width={props.size} onClick={()=>handleClick()} fill={colors}>\r\n    <circle cx={props.size * .5} cy={props.size * .5} r={props.size * (props.rad/100)}  />\r\n  </svg>\r\n  );\r\n}\r\n\r\nexport default Peg;\r\n","import React, {useState, useEffect} from 'react';\nimport './app.css';\nimport Peg from './peg';\n\nfunction App() {\n  const [pegSize, setPegSize] = useState(25);\n  const [pegRad, setPegRad] = useState(50);\n  const [numRows, setNumRows] = useState(0);\n  const [numCols, setNumCols] = useState(0);\n  const [showing, setShowing] = useState(true);\n  let grid = [];\n  let pegColors = {};\n  useEffect( () => {setNumRows(()=>Math.floor((window.innerHeight*.95)/25))\n    setNumCols(()=>Math.floor((window.innerWidth*.99)/25))},[])\n\n  function buildGrid() {\n    for (let i=0; i<numRows; i++){\n      let row = [];\n      for (let k=0; k<numCols; k++){\n        row.push(`${k},${i}`);\n      }\n      grid.push(row);\n    }\n  }\n\n\n  function resetBoard(){\n    setPegSize(25);\n    setPegRad(50);\n    setNumRows(()=>Math.floor((window.innerHeight*.95)/25));\n    setNumCols(()=>Math.floor((window.innerWidth*.99)/25));\n    buildGrid();\n  }\n\n\n  return (\n    <div className=\"App\">\n      <form onChange={buildGrid()} id=\"options\" >\n        <label>peg size<input type=\"number\" className=\"bigInputs\" value={pegSize} onChange={(e) => {setPegSize(e.target.value)}} min=\"2\"/></label>\n        <label>peg spacing<input type=\"range\" value={pegRad} onChange={(e) => {setPegRad(e.target.value)}} min=\"0\" max=\"71\"/></label>\n        <label>rows<input type=\"number\" className=\"bigInputs\" value={numRows} onChange={(e) => {setNumRows(e.target.value)}} min=\"1\"/></label>\n        <label>columns<input type=\"number\" className=\"bigInputs\" value={numCols} onChange={(e) => {setNumCols(e.target.value)}} min=\"1\"/></label>\n        <button onMouseUp={()=>setShowing(false)} onClick={()=>setShowing(true)} className=\"buttons\">clear board</button>\n        <button onClick={()=>resetBoard()} className=\"buttons\">reset to default</button>\n        <button onClick={()=>console.log(pegColors)} className=\"buttons\">save</button>\n      </form>\n      <main id=\"grid\" style={{\n        gridTemplateColumns: `repeat(${numCols}, ${pegSize}px)`,\n        width: `${numCols * pegSize}`\n        }}>\n        {showing && grid.map((row)=> row.map((col)=> <Peg rad={pegRad} key={col} size={pegSize} pushState={(h,l)=>{pegColors[col]=[h,l]}}/>))}\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}