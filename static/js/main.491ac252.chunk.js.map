{"version":3,"sources":["peg.js","App.js","serviceWorker.js","index.js"],"names":["Peg","props","colors","useState","colorNum","setColorNum","height","size","width","cx","cy","r","onClick","console","log","length","fill","App","pegSize","setPegSize","numRows","setNumRows","numCols","setNumCols","grid","className","onChange","i","row","k","push","buildGrid","type","value","e","target","min","style","display","gridTemplateColumns","map","col","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"0KAqBeA,MAnBf,SAAaC,GACX,IAAMC,EAAS,CAAC,QAAS,QAAS,MAAO,SAAU,SAAU,QAAS,OAAQ,SAAU,UADvE,EAEeC,mBAAS,GAFxB,mBAEVC,EAFU,KAEAC,EAFA,KAYjB,OACA,yBAAKC,OAAQL,EAAMM,KAAMC,MAAOP,EAAMM,MACpC,4BAAQE,GAAiB,GAAbR,EAAMM,KAAWG,GAAiB,GAAbT,EAAMM,KAAWI,EAAgB,GAAbV,EAAMM,KAAWK,QAAS,kBAV/EC,QAAQC,IAAI,uBAEVT,EADCD,IAAaF,EAAOa,OAAS,EAClB,EAEAX,EAAS,IAM2EY,KAAMd,EAAOE,OCsBpGa,MAlCf,WAAgB,IAAD,EACiBd,mBAAS,IAD1B,mBACNe,EADM,KACGC,EADH,OAEiBhB,mBAAS,IAF1B,mBAENiB,EAFM,KAEGC,EAFH,OAGiBlB,mBAAS,IAH1B,mBAGNmB,EAHM,KAGGC,EAHH,KAITC,EAAO,GAaX,OACE,yBAAKC,UAAU,OACb,0BAAMC,SAbV,WACE,IAAK,IAAIC,EAAE,EAAGA,EAAEP,EAASO,IAAI,CAE3B,IADA,IAAIC,EAAM,GACDC,EAAE,EAAGA,EAAEP,EAASO,IACvBD,EAAIE,KAAK,OAEXN,EAAKM,KAAKF,GAEZf,QAAQC,IAAIU,GAKMO,IACd,0CAAe,2BAAOC,KAAK,SAASC,MAAOf,EAASQ,SAAU,SAACQ,GAAOf,EAAWe,EAAEC,OAAOF,QAASG,IAAI,OACvG,sCAAW,2BAAOJ,KAAK,SAASC,MAAOb,EAASM,SAAU,SAACQ,GAAOb,EAAWa,EAAEC,OAAOF,QAASG,IAAI,OACnG,yCAAc,2BAAOJ,KAAK,SAASC,MAAOX,EAASI,SAAU,SAACQ,GAAOX,EAAWW,EAAEC,OAAOF,QAASG,IAAI,QAExG,0BAAMC,MAAO,CACXC,QAAU,OACVC,oBAAoB,UAAD,OAAYjB,EAAZ,aAAwBJ,EAAxB,SAElBM,EAAKgB,KAAI,SAACC,GAAD,OAAQA,EAAID,KAAI,SAACZ,GAAD,OAAQ,kBAAC,EAAD,CAAKrB,KAAMW,aCpBjCwB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL9C,QAAQ8C,MAAMA,EAAMC,a","file":"static/js/main.491ac252.chunk.js","sourcesContent":["import React,{useState} from 'react';\r\n\r\nfunction Peg(props){\r\n  const colors = [\"black\", \"white\", \"red\", \"orange\", \"yellow\", \"green\", \"blue\", \"indigo\", \"violet\"];\r\n  const [colorNum, setColorNum] = useState(0);\r\n  function handleClick (){\r\n    console.log(\"ayyyee lit fam\");\r\n    if(colorNum === colors.length - 1){\r\n      setColorNum(0);\r\n    }else{\r\n      setColorNum(colorNum+1);\r\n    }\r\n  }\r\n\r\n  return(\r\n  <svg height={props.size} width={props.size}>\r\n    <circle cx={props.size * .5} cy={props.size * .5} r={props.size * .4} onClick={()=>handleClick()} fill={colors[colorNum]} />\r\n  </svg>\r\n  );\r\n}\r\n\r\nexport default Peg;\r\n","import React, {useState} from 'react';\nimport './app.css';\nimport Peg from './peg'\n\nfunction App() {\n  const [pegSize, setPegSize] = useState(75);\n  const [numRows, setNumRows] = useState(10);\n  const [numCols, setNumCols] = useState(10)\n  let grid = [];\n\n  function buildGrid() {\n    for (let i=0; i<numRows; i++){\n      let row = [];\n      for (let k=0; k<numCols; k++){\n        row.push(\"peg\");\n      }\n      grid.push(row);\n    }\n    console.log(grid);\n  }\n\n  return (\n    <div className=\"App\">\n      <form onChange={buildGrid()}>\n        <label>peg size<input type=\"number\" value={pegSize} onChange={(e) => {setPegSize(e.target.value)}} min=\"2\"/></label>\n        <label>rows<input type=\"number\" value={numRows} onChange={(e) => {setNumRows(e.target.value)}} min=\"1\"/></label>\n        <label>columns<input type=\"number\" value={numCols} onChange={(e) => {setNumCols(e.target.value)}} min=\"1\"/></label>\n      </form>\n      <main style={{\n        display : \"grid\",\n        gridTemplateColumns: `repeat(${numCols}, ${pegSize}px)`\n        }}>\n        {grid.map((col)=> col.map((row)=> <Peg size={pegSize}/>))}\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}